<h3>Secret Service</h3>

<p>Anything here should be shown as login information</p>

{{#if errorMessage}}
    <div class="alert alert-danger"> <strong>Error:</strong> {{errorMessage}}</div>
{{else if successMessage}}
    <div class="alert alert-success"> <strong>Success:</strong> {{successMessage}}</div>
{{/if}}

<div>
    <h4>Collected Resource:</h4>
    <p id ="ironCollectResource-js">Iron: {{IronMine.HistoryCollectedResource}}</p>
    <p id ="crystalCollectResource-js">Crystal: {{CrystalMine.HistoryCollectedResource}}</p>
    <p id ="petroleumCollectResource-js">Petroleum: {{PetroleumMine.HistoryCollectedResource}}</p>
</div>

<div>
    <h4>Achievement</h4>
    {{#if Achievement.Resource.FirstCollect.Bool}}
        <div class="alert alert-success">
            <p>{{Achievement.Resource.FirstCollect.Name}}</p>
            <p>{{Achievement.Resource.FirstCollect.Description}}</p>
        </div>
    {{else}}
        <div class="alert alert-secondary">
            <p>{{Achievement.Resource.FirstCollect.Name}}</p>
            <p>{{Achievement.Resource.FirstCollect.Description}}</p>
        </div>
    {{/if}}

</div>

<br>
<form method="post" action="/information">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <p>Old password</p>
                <input class="form-control" id="password" name="password" type="password" placeholder="Password" required>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <p>New password</p>
                <input class="form-control" id="newPassword" name="newPassword" type="password" placeholder="New password" required>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <p>Confirm New password</p>
                <input class="form-control" id="confirmNewPassword" name="confirmNewPassword" type="password" placeholder="Confirm new password" required>
            </div>
        </div>
    </div>
    <input type="submit" class="btn btn-success pull-right" value="Confirm">
</form>


<br>
<br>

<form method="post" action="/information">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <p>Change name</p>
                <input class="form-control" id="displayName" name="displayName" type="displayName" placeholder="Enter text here" required>
            </div>
        </div>
    </div>
    <input type="submit" class="btn btn-success pull-right" value="Confirm">
</form>

<br>
<form method="post" action="/information">
    <input type="submit" class="btn btn-success pull-right" value="Reset">
</form>

<script>
    function upgradeIronMine() {
        let dateNow = Math.floor(Date.now() / 1000); // Convert to seconds
        //produce rate
        let duration = dateNow - {{data.previousCollectTime}};
        let collectIron, collectCrystal,collectPetroleum;

        if({{Resource.Iron}} >= {{IronStorage.Capacity}}){
          collectIron = "Iron: " + {{IronMine.HistoryCollectedResource}};
        }else if(( {{Resource.Iron}} + parseInt({{IronMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}) ) <= {{IronStorage.Capacity}} ){
          //determine how many thing that we can collect
          collectIron = "Iron: " + ({{IronMine.HistoryCollectedResource}} + parseInt({{IronMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}));
        }

        if({{Resource.Crystal}} >= {{CrystalStorage.Capacity}}){
          collectCrystal = "Crystal: " + {{CrystalMine.HistoryCollectedResource}};
        }else if(( {{Resource.Crystal}} + parseInt({{CrystalMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}) ) <= {{CrystalStorage.Capacity}} ){
          //determine how many thing that we can collect
          collectCrystal = "Crystal: " + ({{CrystalMine.HistoryCollectedResource}} + parseInt({{CrystalMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}));
        }

        if({{Resource.Petroleum}} >= {{PetroleumStorage.Capacity}}){
          collectPetroleum = "Petroleum: " + {{PetroleumMine.HistoryCollectedResource}};
        }else if(( {{Resource.Petroleum}} + parseInt({{PetroleumMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}) ) <= {{PetroleumStorage.Capacity}} ){
          //determine how many thing that we can collect
          collectPetroleum = "Petroleum: " + ({{PetroleumMine.HistoryCollectedResource}} + parseInt({{PetroleumMine.ProduceRate}} * duration/3600 * {{Achievement.Resource.Bonus}}));
        }
        
        document.getElementById('ironCollectResource-js').innerText = collectIron;
        document.getElementById('crystalCollectResource-js').innerText = collectCrystal;
        document.getElementById('petroleumCollectResource-js').innerText = collectPetroleum;
    }
setInterval(upgradeIronMine, 1000);
// Initial call to run the test function immediately
upgradeIronMine();
</script>